/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package forms;

import controller.ControllerUI;
import domain.Article;
import domain.Recommendation;
import domain.Worker;
import forms.util.FormViewMode;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import forms.validator.Validator;
import java.awt.Color;

/**
 *
 * @author Veljko
 */
public class RecommendationForm extends javax.swing.JFrame {

    private Recommendation chosenRecommendation;
    private List<Article> articles;
    private List<Worker> workers;
    private Worker currentWorker;
    private String error;
    
    /**
     * Creates new form RecommendationForm
     */
    public RecommendationForm(int formMode, Worker currentWorker) {
        initComponents();
        try {
            this.articles = ControllerUI.getInstance().getAllArticles();
            this.currentWorker=currentWorker;
        } catch (Exception ex) {
            Logger.getLogger(RecommendationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        populateForm();
        lblWorker.setText(currentWorker.getFirstname()+" "+currentWorker.getLastname());
        prepareView(formMode);
        setLocationRelativeTo(null);
        error="";
    }
    
    public RecommendationForm(int formMode, Recommendation recommendation, Worker currentWorker) {
        chosenRecommendation=recommendation;
        initComponents();
        try {
            this.articles = ControllerUI.getInstance().getAllArticles();
            this.workers=ControllerUI.getInstance().getAllWorkers();            
            this.currentWorker=currentWorker;
        } catch (Exception ex) {
            Logger.getLogger(RecommendationForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        populateForm();        
        prepareView(formMode);
        setRecommendation();
        error="";
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        comboArticle = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtRating = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtComment = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        sldRating = new javax.swing.JSlider();
        btnHelp = new javax.swing.JButton();
        lblWorker = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Artikal:");

        comboArticle.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Radnik:");

        jLabel3.setText("Ocena:");

        txtRating.setEditable(false);

        jLabel4.setText("Komentar:");

        txtComment.setColumns(20);
        txtComment.setRows(5);
        jScrollPane1.setViewportView(txtComment);

        btnSave.setText("Sacuvaj");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnDelete.setText("Obrisi");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnBack.setText("‚Üê");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        sldRating.setMajorTickSpacing(5);
        sldRating.setMaximum(10);
        sldRating.setMinorTickSpacing(1);
        sldRating.setPaintLabels(true);
        sldRating.setPaintTicks(true);
        sldRating.setSnapToTicks(true);
        sldRating.setValue(0);
        sldRating.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sldRating.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldRatingStateChanged(evt);
            }
        });

        btnHelp.setText("Pomoc");
        btnHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelpActionPerformed(evt);
            }
        });

        lblWorker.setText("jLabel5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnHelp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete)
                        .addGap(54, 54, 54)
                        .addComponent(btnSave))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sldRating, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                .addComponent(txtRating, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboArticle, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(143, 143, 143))
                            .addComponent(lblWorker, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addGap(43, 43, 43))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboArticle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWorker))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sldRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRating, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSave)
                            .addComponent(btnDelete)
                            .addComponent(btnBack)
                            .addComponent(btnHelp))
                        .addGap(40, 40, 40))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 98, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        error="";
        if(!checkFileds()){
            JOptionPane.showMessageDialog(this, error, "Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Recommendation recommendation = new Recommendation();
        recommendation.setArticleID(((Article)comboArticle.getSelectedItem()).getArticleID());
        recommendation.setWorkerID(currentWorker.getWorkerID());
        recommendation.setRating(Integer.parseInt(txtRating.getText()));
        recommendation.setComment(txtComment.getText());
        try {            
            ControllerUI.getInstance().saveRecommendation(recommendation);
            JOptionPane.showMessageDialog(this, "Sistem je zapamtio preporuku");
            this.dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti preporuku: " +ex.getMessage(), "Message", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if(currentWorker.getWorkerID()!=chosenRecommendation.getWorkerID()){
            JOptionPane.showMessageDialog(this, "Niste ovlasceni da brisete ovu preporuku!");
            return;
        }
        try {
            Recommendation recommendation=chosenRecommendation;
            ControllerUI.getInstance().deleteRecommendation(recommendation);
            JOptionPane.showMessageDialog(this, "Sistem je obrisao preporuku");
            this.dispose();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da obrise preporuku: " + ex.getMessage(), "Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void sldRatingStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldRatingStateChanged
        txtRating.setText(String.valueOf(sldRating.getValue()));
    }//GEN-LAST:event_sldRatingStateChanged

    private void btnHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelpActionPerformed
        JOptionPane.showMessageDialog(this, "Ovo je forma za dodavanje, pregled i brisanje preporuke!\n"
                + "Ukoliko je izabran mod za dodavanje preporuke, potrebno je u iz opadajuceg menija izabrati\n"
                + "artikal za koji se ta preporuka kreira, zatim na skali izabrati ocenu kojom se ocenjuje artikal\n"
                + "i uneti komentar za konkretan artikal. Nijedno polje ne sme biti prazno. U polje pored skale se\n"
                + "automatski upisuje ocena koja je izabrana na skali. Na dugme sacuvaj se validiraju polja i ukoliko\n"
                + "je sve u redu, preporuka se pamti u sistemu. Ako je u pitanju mod za prikaz, kod njega je moguce\n"
                + "preko dugmeta obrisi obrisati preporuku. Preporuku moze da obrise radnik koji ju je kreirao, ostali\n"
                + "nisu ovlasceni za to i imaju pravo samo da je pregledaju.");
    }//GEN-LAST:event_btnHelpActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnHelp;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox<String> comboArticle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblWorker;
    private javax.swing.JSlider sldRating;
    private javax.swing.JTextArea txtComment;
    private javax.swing.JTextField txtRating;
    // End of variables declaration//GEN-END:variables

    private void prepareView(int formMode) {
        switch (formMode) {
            case FormViewMode.ADD_MODE:
                comboArticle.setEnabled(true);
                txtComment.setEditable(true);
                txtRating.setEditable(true);
                btnDelete.setEnabled(false);
                btnSave.setEnabled(true);
                sldRating.setEnabled(true);
                break;
            case FormViewMode.VIEW_MODE:
                comboArticle.setEnabled(false);
                txtComment.setEditable(false);
                txtRating.setEditable(false);
                btnDelete.setEnabled(true);
                btnSave.setEnabled(false);
                sldRating.setEnabled(false);
                break;
            default:
                throw new AssertionError();
        }
    }

    private void setRecommendation() {
        txtComment.setText(chosenRecommendation.getComment());
        txtRating.setText(String.valueOf(chosenRecommendation.getRating()));
        for(Article article:articles){
            if(article.getArticleID()==chosenRecommendation.getArticleID()){
                comboArticle.setSelectedItem(article.getName());
            }
        }
        for (Worker worker : workers) {
            if(worker.getWorkerID()==chosenRecommendation.getWorkerID()){
                lblWorker.setText(worker.getFirstname()+" "+worker.getLastname());
                if (worker.isDeleted()) {
                    lblWorker.setForeground(Color.red);
                }
            }
        }        
        sldRating.setValue(chosenRecommendation.getRating());
    }

    private void populateForm() {
        JComboBox comboBoxArticle = new JComboBox(new DefaultComboBoxModel(articles.toArray()));
        comboArticle.setModel(comboBoxArticle.getModel());
        txtRating.setText(String.valueOf(sldRating.getValue()));
    }

    private boolean checkFileds() {
        boolean signal=true;
        if(Validator.getInstance().isNull(comboArticle.getSelectedItem())
                || Validator.getInstance().isEmpty(txtComment.getText())
                || Validator.getInstance().isEmpty(txtRating.getText())){
            error+="Nisu popunjena sva polja";
            signal = false;
        }
        
       
        return signal;
    }
}
